{"version":3,"sources":["compiler/lexer/index.js","App.js","reportWebVitals.js","index.js"],"names":["lexer","require","macros","rules","App","useState","file","setFile","lexerResult","setLexerResult","className","type","id","onChange","e","files","target","reader","FileReader","readAsText","onload","evt","result","onerror","accept","onClick","setInput","match","lex","disabled","for","value","event","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iMAmDeA,G,MAFD,IAjDGC,EAAQ,IAiDX,CA/CE,CACdC,OAAQ,CACN,MAAS,QACT,mBAAsB,6BACtB,iBAAoB,8BACpB,UAAa,oBAEfC,MAAO,CAEL,CAAC,uBAA6B,mFAC9B,CAAC,qBAA6B,oEAC9B,CAAC,cAA4B,iFAC7B,CAAC,eAA6B,wEAG9B,CAAC,IAA6B,qEAC9B,CAAC,IAA6B,yEAC9B,CAAC,IAA6B,WAC9B,CAAC,KAA6B,WAC9B,CAAC,eAA6B,WAG9B,CAAC,mBAA6B,WAC9B,CAAC,yBAA6B,WAC9B,CAAC,sBAA6B,8EAG9B,CAAC,MAA6B,qEAC9B,CAAC,MAA6B,qEAG9B,CAAC,KAA6B,sEAC9B,CAAC,mBAA6B,+EAC9B,CAAC,sBAA6B,+EAG9B,CAAC,IAA6B,gFAG9B,CAAC,MAA6B,mEAC9B,CAAC,IAA6B,mEAG9B,CAAC,OAA6B,qF,OCUnBC,MAnDf,WACI,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KA2BA,OACI,sBAAKC,UAAU,MAAf,UAEI,sBAAKA,UAAU,YAAf,UACI,uBAAOC,KAAK,OAAOC,GAAG,aAAaC,SA7B7B,SAACC,GACf,IAAIC,EAAQD,EAAEE,OAAOD,MAAM,GACvBE,EAAS,IAAIC,WACjBD,EAAOE,WAAWJ,EAAO,SACzBE,EAAOG,OAAS,SAAUC,GACtBd,EAAQc,EAAIL,OAAOM,OACtB,EACDL,EAAOM,QAAU,SAAUF,GACvBd,EAAQ,wBACX,CACJ,EAmBmEiB,OAAO,UAC/D,wBAAQZ,GAAG,UAAUa,QAlBjB,WACZzB,EAAM0B,SAASpB,GAIf,IAHA,IAAIqB,EAAQ3B,EAAM4B,MACdN,EAAS,GAEG,GAATK,GACHL,GAAUK,EAAQ,KAClBA,EAAQ3B,EAAM4B,MAGlBnB,EAAea,EAClB,EAOkDO,SAAmB,KAATvB,EAAjD,yBAEJ,sBAAKI,UAAU,UAAf,UACI,sBAAKA,UAAU,WAAf,UACI,uBAAOoB,IAAI,WAAX,uBACA,0BAAUpB,UAAU,OAAOE,GAAG,WAAWmB,MAAOzB,EAAMO,SAAU,SAACmB,GAAD,OAAWzB,EAAQyB,EAAMhB,OAAOe,MAAhC,OAEpE,sBAAKrB,UAAU,WAAf,UACI,uBAAOoB,IAAI,YAAX,uCACA,0BAAUpB,UAAU,OAAOE,GAAG,YAAYmB,MAAOvB,YAMpE,ECzCcyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,ECJYQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,OAOJd,G","file":"static/js/main.4ddb6df3.chunk.js","sourcesContent":["const JisonLex = require(\"jison-lex\")\r\n\r\nconst lexemes = {\r\n  macros: {\r\n    \"DIGIT\": \"[0-9]\",\r\n    \"INVALID_IDENTIFIER\": \"[A-Za-z_][A-Za-z_0-9]{15,}\",\r\n    \"VALID_IDENTIFIER\": \"[A-Za-z_][A-Za-z_0-9]{0,14}\",\r\n    \"LINE_FEED\": \"(\\\\r|\\\\n|\\\\r\\\\n)\"\r\n  },\r\n  rules: [\r\n    // Identificadores e números\r\n    [\"{INVALID_IDENTIFIER}\",      \"return ['INVALID_ID_LENGTH', yytext, [yylloc.first_line, yylloc.first_column]];\"],\r\n    [\"{VALID_IDENTIFIER}\",        \"return ['ID', yytext, [yylloc.first_line, yylloc.first_column]];\"],\r\n    [\"{DIGIT}{9,}\",              \"return ['OVERFLOW_NUMBER', yytext, [yylloc.first_line, yylloc.first_column]];\"],\r\n    [\"{DIGIT}{1,8}\",              \"return ['NUMBER', yytext, [yylloc.first_line, yylloc.first_column]];\"],\r\n\r\n    // Delimitadores\r\n    [\",\",                         \"return ['COLON', null, [yylloc.first_line, yylloc.first_column]];\"],\r\n    [\";\",                         \"return ['SEMICOLON', null, [yylloc.first_line, yylloc.first_column]];\"],\r\n    [\" \",                         \"return;\"],\r\n    [\"\\t\",                        \"return;\"],\r\n    [\"{LINE_FEED}+\",              \"return;\"],\r\n\r\n    // Comentários\r\n    [\"\\/\\/.*{LINE_FEED}+\",        \"return;\"],\r\n    [\"\\\\\\{(\\\\*(?!\\/)|[^*])*\\\\\\}\", \"return;\"],\r\n    [\"\\\\\\{(\\\\*(?!\\/)|[^*])*\",     \"return ['UNEXPECTED_EOF', null, [yylloc.first_line, yylloc.first_column]];\"],\r\n\r\n    // Parênteses\r\n    [\"\\\\(\",                       \"return ['LPAREN', null, [yylloc.first_line, yylloc.first_column]]\"],\r\n    [\"\\\\)\",                       \"return ['RPAREN', null, [yylloc.first_line, yylloc.first_column]]\"],\r\n\r\n    // Operadores\r\n    [\":=\",                        \"return ['ASSIGN', null, [yylloc.first_line, yylloc.first_column]];\"],\r\n    [\"(<>|<=|<|>=|>|=)\",          \"return ['RELATIONAL_OP', yytext, [yylloc.first_line, yylloc.first_column]];\"],\r\n    [\"(\\\\*|\\\\+|\\\\-|\\\\/|%)\",       \"return ['ARITMETHIC_OP', yytext, [yylloc.first_line, yylloc.first_column]];\"],\r\n\r\n    // Declaração de tipo\r\n    [\":\",                         \"return ['TYPE_DECLARATION', null, [yylloc.first_line, yylloc.first_column]];\"],\r\n\r\n    // Final de arquivo\r\n    [\"\\\\.\",                       \"return ['EOP', null, [yylloc.first_line, yylloc.first_column]];\"],\r\n    [\"$\",                         \"return ['EOF', null, [yylloc.first_line, yylloc.first_column]];\"],\r\n\r\n    // Símbolos fora do alfabeto\r\n    [\"[^*]\",                      \"return ['UNEXPECTED_TOKEN', yytext, [yylloc.first_line, yylloc.first_column]]\"],\r\n  ]\r\n}\r\n\r\nconst lexer = new JisonLex(lexemes)\r\n\r\nexport default lexer\r\n","import './App.css';\nimport React, { useState } from 'react';\nimport lexer from \"./compiler/lexer\"\n\nfunction App() {\n    const [file, setFile] = useState('')\n    const [lexerResult, setLexerResult] = useState('')\n\n    const inputFile = (e) => {\n        var files = e.target.files[0];\n        var reader = new FileReader();\n        reader.readAsText(files, \"UTF-8\");\n        reader.onload = function (evt) {\n            setFile(evt.target.result)\n        }\n        reader.onerror = function (evt) {\n            setFile(\"Erro ao ler o arquivo\")\n        }\n    }\n\n    const analyze = () => {\n        lexer.setInput(file)\n        let match = lexer.lex();\n        let result = ''\n\n        while (match != 1) {\n            result += match + \"\\n\"\n            match = lexer.lex();\n        }\n\n        setLexerResult(result)\n    }\n\n    return (\n        <div className=\"App\">\n\n            <div className=\"divButton\">\n                <input type=\"file\" id=\"fileUpload\" onChange={inputFile} accept=\".lalg\"></input>\n                <button id=\"analyze\" onClick={analyze} disabled={file === ''}>Analizar</button>\n            </div>\n            <div className=\"divCode\">\n                <div className=\"divLabel\">\n                    <label for=\"codeArea\">Código</label>\n                    <textarea className=\"code\" id=\"codeArea\" value={file} onChange={(event) => setFile(event.target.value)}></textarea>\n                </div>\n                <div className=\"divLabel\">\n                    <label for=\"lexerArea\">Separação Léxica</label>\n                    <textarea className=\"code\" id=\"lexerArea\" value={lexerResult} ></textarea>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}